from class_neural import neuralNetwork  # импортирование класса нейронной сети
import numpy as np  # импортирование библиотеки для работы с матрицами, векторами
import matplotlib.pyplot as plt  # импортирование библиотеки для построения графиков

# задаем конфигурации нейронной сети
input_nodes = 3  # колличество нейронов во входном слое
hidden_node = [10]   # колличество нейронов и скрытые слоя
output_nodes = 29  # колличество нейронов во выходном слое
learning_rate = 0.1  # коэффициент обучения
# инициализируем нейронную сеть (создаем объект нейронной сети)
n = neuralNetwork(input_nodes, hidden_node, output_nodes, learning_rate)
input_file = 'input_1.csv'
output_file = 'output_1.csv'
# считываем входные данные из файла
with open(input_file, 'r') as f_o:
    input_data = f_o.readlines()
# считываем входные данные из файла
with open(output_file, 'r') as f_o:
    output_data = f_o.readlines()
# создаем массив значений напряжений
V = np.linspace(0, 0.5, 30)
# записываем истинные значения тока
II = '0 6.96890221646430e-08 1.33585241650928e-07 1.87045491236855e-07 2.27307627131308e-07 2.53586664609999e-07 ' \
     '2.66622768323193e-07 2.67934110493272e-07 2.59238309802126e-07 2.41249942826908e-07 2.13100010815177e-07 ' \
     '1.70220091358203e-07 1.03220030322234e-07 6.96591649626146e-08 6.24181217952826e-08 6.27779536483396e-08 ' \
     '6.50440413691550e-08 6.92566091720526e-08 7.53962762161739e-08 8.35041023302298e-08 9.37313492868583e-08 ' \
     '1.06308849123870e-07 1.21849171025836e-07 1.40420564318235e-07 1.62138307554969e-07 1.87412776774711e-07 ' \
     '2.16502158326872e-07 2.49530239138902e-07 2.86437326558888e-07 3.26923320783867e-07'
# превращаем строку в массив данных
II = II.split(' ')
II = np.asfarray(II)
# цикл треннировки нейронной сети
for i in range(len(input_data)):
    input_l = np.asfarray(input_data[i].split(';'))  # превращаем строку в массив данных
    output_l = np.asfarray(output_data[i].split(';'))  # превращаем строку в массив данных
    input_l = input_l[:3]  # обрезаем массив
    output_l = output_l[1:]  # обрезаем массив
    n.train(input_l, output_l)  # вызываем метод треннировки нейронной сети
    """for j, v in enumerate(V):
        if j == 0:
            input_l = np.append(input_l, v)
        elif j != 0:
            input_l[-1] = v
            n.train(input_l, output_l[j])"""

#final_input = [0.2275, 0.1,	0.3, 0.15, 0.16, 0.15, 0.46]
# задаем входные данные для теста
final_input = [0.2275, 0.1,	0.3]
I = np.array([0])  # создаем массив со значением тока
"""for j, v in enumerate(V):
    if j != 0:
        final_input[-1] = v
        I.append(n.query(final_input)[-1] * 1e-5)"""
I = np.append(I, n.query(final_input) * 1e-5)  # получаем данные при подаче тестовых данных в нейронную сеть
print(I)
plt.title("ВАХ резонансно туннельной структры")
# построение графика ВАХ с полученными значениями Тока из нейронной сети
plt.plot(V, I, 'r-o', color='r', label='Значения полученные при помощи нейронной сети')
plt.plot(V, II, 'r-o', color='b', label='Теоретически рассчитанные значения')  # построение графика реальных значений ВАХ
# ось x
plt.xlabel('U, В')
# ось y
plt.ylabel('I, А')
# легенда
plt.legend()
plt.grid()  # включаем сетку
plt.show()  # вывод графика

